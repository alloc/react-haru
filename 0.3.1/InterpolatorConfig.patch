From d3bce7339c55a2e2f8c95cc519601c94682444a6 Mon Sep 17 00:00:00 2001
From: Alec Larson <1925840+aleclarson@users.noreply.github.com>
Date: Wed, 31 Mar 2021 16:44:41 -0400
Subject: [PATCH] revert: InterpolatorConfig

---
 react-haru.d.ts | 136 +++++++++++++++++-----------------
 react-haru.mjs  | 192 ++++++++++++++++++++++++------------------------
 2 files changed, 164 insertions(+), 164 deletions(-)

diff --git a/react-haru.d.ts b/react-haru.d.ts
index 9bcaaf3..d3bd93e 100644
--- a/react-haru.d.ts
+++ b/react-haru.d.ts
@@ -19,74 +19,74 @@ declare type Merge<A, B> = Remap<{
 declare type Constrain<T, U> = [T] extends [Any] ? U : [T] extends [U] ? T : U;
 
 declare type EasingFunction = (t: number) => number;
-declare type ExtrapolateType = 'identity' | 'clamp' | 'extend';
+
 interface InterpolatorFactory {
     <In, Out>(interpolator: InterpolatorFn<In, Out>): typeof interpolator;
-    <Out>(config: InterpolatorConfig<Out>): (input: number) => Animatable<Out>;
-    <Out>(range: readonly number[], output: readonly Constrain<Out, Animatable>[], extrapolate?: ExtrapolateType): (input: number) => Animatable<Out>;
-    <In, Out>(...args: InterpolatorArgs<In, Out>): InterpolatorFn<In, Out>;
+
+
+
 }
-declare type InterpolatorArgs<In = any, Out = any> = [InterpolatorFn<Arrify<In>, Out>] | [InterpolatorConfig<Out>] | [
-    readonly number[],
-    readonly Constrain<Out, Animatable>[],
-    (ExtrapolateType | undefined)?
-];
+declare type InterpolatorArgs<In = any, Out = any> = [InterpolatorFn<Arrify<In>, Out>]
+
+
+
+
 declare type InterpolatorFn<In, Out> = (...inputs: Arrify<In>) => Out;
-declare type InterpolatorConfig<Out = Animatable> = {
-    /**
-     * What happens when the spring goes below its target value.
-     *
-     *  - `extend` continues the interpolation past the target value
-     *  - `clamp` limits the interpolation at the max value
-     *  - `identity` sets the value to the interpolation input as soon as it hits the boundary
-     *
-     * @default 'extend'
-     */
-    extrapolateLeft?: ExtrapolateType;
-    /**
-     * What happens when the spring exceeds its target value.
-     *
-     *  - `extend` continues the interpolation past the target value
-     *  - `clamp` limits the interpolation at the max value
-     *  - `identity` sets the value to the interpolation input as soon as it hits the boundary
-     *
-     * @default 'extend'
-     */
-    extrapolateRight?: ExtrapolateType;
-    /**
-     * What happens when the spring exceeds its target value.
-     * Shortcut to set `extrapolateLeft` and `extrapolateRight`.
-     *
-     *  - `extend` continues the interpolation past the target value
-     *  - `clamp` limits the interpolation at the max value
-     *  - `identity` sets the value to the interpolation input as soon as it hits the boundary
-     *
-     * @default 'extend'
-     */
-    extrapolate?: ExtrapolateType;
-    /**
-     * Input ranges mapping the interpolation to the output values.
-     *
-     * @example
-     *
-     *   range: [0, 0.5, 1], output: ['yellow', 'orange', 'red']
-     *
-     * @default [0,1]
-     */
-    range?: readonly number[];
-    /**
-     * Output values from the interpolation function. Should match the length of the `range` array.
-     */
-    output: readonly Constrain<Out, Animatable>[];
-    /**
-     * Transformation to apply to the value before interpolation.
-     */
-    map?: (value: number) => number;
-    /**
-     * Custom easing to apply in interpolator.
-     */
-    easing?: EasingFunction;
-};
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
 interface StringInterpolation {
     (config: InterpolatorConfig<string>): (t: number) => string;
@@ -113,7 +113,7 @@ declare const G: {
     colors: {
         [key: string]: string | number;
     };
-    createStringInterpolator: StringInterpolation;
+
     skipAnimation: boolean;
     willAdvance: (animation: OpaqueAnimation) => void;
     tracker: any;
@@ -1515,8 +1515,8 @@ declare type Interpolated<T extends ReadonlyArray<any>> = {
 interface Interpolator {
     <In extends ReadonlyArray<any>, Out>(parents: In, interpolator: (...args: Interpolated<In>) => Out): Interpolation<Out>;
     <In, Out>(parent: FluidValue<In> | In, interpolator: InterpolatorFn<In, Out>): Interpolation<Out>;
-    <Out>(parents: OneOrMore<FluidValue>, config: InterpolatorConfig<Out>): Interpolation<Animatable<Out>>;
-    <Out>(parents: OneOrMore<FluidValue<number>> | FluidValue<number[]>, range: readonly number[], output: readonly Constrain<Out, Animatable>[], extrapolate?: ExtrapolateType): Interpolation<Animatable<Out>>;
+
+    
 }
 
 /** Advance all animations by the given time */
@@ -1547,4 +1547,4 @@ declare function inferTo<T extends object>(props: T): InferTo<T>;
 declare function lerp<T extends Animatable, U extends Animatable<T>>(from: T, to: U, progress: number): Animatable<T>;
 declare function lerp<T>(from: T, to: NoInfer<T>, progress: number): T;
 
-export { Animatable, Animated, AnimatedArray, AnimatedObject, AnimatedString, AnimatedType, AnimatedValue, AnimationProps, AnimationResult, AsyncResult, AsyncResultArray, BailSignal, Change, Controller, ControllerFlushFn, ControllerProps, ControllerUpdate, EasingFunction, EventProp, ExtrapolateType, ForwardProps, FrameValue, G as Globals, GoalProp, GoalValue, GoalValues, HostConfig, InferTo, InlineToProps, Interpolated, Interpolation, Interpolator, InterpolatorArgs, InterpolatorConfig, InterpolatorFactory, InterpolatorFn, ItemKeys, LoopProp, MatchProp, OnChange, OnPause, OnProps, OnResolve, OnRest, OnResume, OnStart, Payload, PickAnimated, ReservedEventProps, ReservedProps, Spring, SpringChain, SpringComponentProps, SpringConfig, SpringContext, SpringPresets, SpringProps, SpringRef, SpringTo, SpringToFn, SpringUpdate, SpringUpdateFn, SpringValue, SpringValues, Springify, SpringsUpdate, ToProps, Trail, TrailComponentProps, Transition, TransitionComponentProps, TransitionFn, TransitionFrom, TransitionKey, TransitionRenderFn, TransitionState, TransitionTo, TransitionValues, UseSpringProps, UseSpringsProps, UseTrailProps, UseTransitionProps, VelocityProp, createHost, createInterpolator, defaultColors, defaultStringInterpolation, getAnimated, getAnimatedType, getPayload, inferTo, isAnimated, lerp, setAnimated, to, update, useChain, useSpring, useSpringRef, useSprings, useTrail, useTransition };
+export { Animatable, Animated, AnimatedArray, AnimatedObject, AnimatedString, AnimatedType, AnimatedValue, AnimationProps, AnimationResult, AsyncResult, AsyncResultArray, BailSignal, Change, Controller, ControllerFlushFn, ControllerProps, ControllerUpdate, EasingFunction, EventProp, ExtrapolateType, ForwardProps, FrameValue, G as Globals, GoalProp, GoalValue, GoalValues, HostConfig, InferTo, InlineToProps, Interpolated, Interpolation, Interpolator, InterpolatorArgs, InterpolatorFactory, InterpolatorFn, ItemKeys, LoopProp, MatchProp, OnChange, OnPause, OnProps, OnResolve, OnRest, OnResume, OnStart, Payload, PickAnimated, ReservedEventProps, ReservedProps, Spring, SpringChain, SpringComponentProps, SpringConfig, SpringContext, SpringPresets, SpringProps, SpringRef, SpringTo, SpringToFn, SpringUpdate, SpringUpdateFn, SpringValue, SpringValues, Springify, SpringsUpdate, ToProps, Trail, TrailComponentProps, Transition, TransitionComponentProps, TransitionFn, TransitionFrom, TransitionKey, TransitionRenderFn, TransitionState, TransitionTo, TransitionValues, UseSpringProps, UseSpringsProps, UseTrailProps, UseTransitionProps, VelocityProp, createHost, createInterpolator, defaultColors, defaultStringInterpolation, getAnimated, getAnimatedType, getPayload, inferTo, isAnimated, lerp, setAnimated, to, update, useChain, useSpring, useSpringRef, useSprings, useTrail, useTransition };
diff --git a/react-haru.mjs b/react-haru.mjs
index 3ec00dc..bad9922 100644
--- a/react-haru.mjs
+++ b/react-haru.mjs
@@ -32,65 +32,65 @@ import {
 const createInterpolator = (
   range, 
   output, 
-  extrapolate
+
 ) => {
   if (is.function(
     range
   )) {
     return range;
   }
-  if (is.array(
-    range
-  )) {
-    return createInterpolator(
-      {
-      range,
-      output,
-      extrapolate
-    }
-    );
-  }
+
+
+
+
+
+
+
+
+
+
+
   if (is.string(
     range.output[0]
   )) {
-    return G.createStringInterpolator(
+    return defaultStringInterpolation(
       range
     );
   }
   const config = range;
   const outputRange = config.output;
-  const inputRange = config.range 
-    || [
-    0, 
-    1
-  ];
-  const extrapolateLeft = config.extrapolateLeft 
-    || config.extrapolate 
-    || "extend";
-  const extrapolateRight = config.extrapolateRight 
-    || config.extrapolate 
-    || "extend";
-  const easing = config.easing 
-    || ((
-    t
-  ) => t);
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
   return (
     input
   ) => {
-    const range2 = findRange(
-      input, 
-      inputRange
-    );
+
+
+
+  
     return interpolate(
       input, 
-      inputRange[range2], 
-      inputRange[range2 + 1], 
-      outputRange[range2], 
-      outputRange[range2 + 1], 
-      easing, 
-      extrapolateLeft, 
-      extrapolateRight, 
-      config.map
+      0, 
+      1, 
+      outputRange[0], 
+      outputRange[1], 
+
+
+
+
     );
   };
 };
@@ -100,43 +100,43 @@ function interpolate(
   inputMax, 
   outputMin, 
   outputMax, 
-  easing, 
-  extrapolateLeft, 
-  extrapolateRight, 
-  map
+
+
+
+
 ) {
-  let result = map 
-    ? map(
-    input
-  ) 
-    : input;
-  if (result < inputMin) {
-    if (extrapolateLeft === "identity")
-      return result;
-    else if (extrapolateLeft === "clamp")
-      result = inputMin;
-  }
-  if (result > inputMax) {
-    if (extrapolateRight === "identity")
-      return result;
-    else if (extrapolateRight === "clamp")
-      result = inputMax;
-  }
+  let result = input
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
   if (outputMin === outputMax)
     return outputMin;
-  if (inputMin === inputMax)
-    return input <= inputMin 
-      ? outputMin 
-      : outputMax;
-  if (inputMin === -Infinity)
-    result = -result;
-  else if (inputMax === Infinity)
-    result = result - inputMin;
-  else
+
+
+
+
+
+
+
+
+
     result = (result - inputMin) / (inputMax - inputMin);
-  result = easing(
-    result
-  );
+
+
+
   if (outputMin === -Infinity)
     result = -result;
   else if (outputMax === Infinity)
@@ -145,15 +145,15 @@ function interpolate(
     result = result * (outputMax - outputMin) + outputMin;
   return result;
 }
-function findRange(
-  input, 
-  inputRange
-) {
-  for (var i = 1; i < inputRange.length - 1; ++i)
-    if (inputRange[i] >= input)
-      break;
-  return i - 1;
-}
+
+
+
+
+
+
+
+
+
 
 function normalizeColor(
   color
@@ -475,7 +475,7 @@ const defaultStringInterpolation = (
     output2
   ) => createInterpolator(
     {
-    ...config, 
+
     output: output2
   }
   )
@@ -747,7 +747,7 @@ const flushCalls = (
 
 const G = {
   colors: defaultColors,
-  createStringInterpolator: defaultStringInterpolation,
+
   skipAnimation: false,
   willAdvance: noop,
   tracker: null,
@@ -762,8 +762,8 @@ const G = {
       raf.use(
         globals.requestAnimationFrame
       );
-    if (globals.createStringInterpolator)
-      G.createStringInterpolator = globals.createStringInterpolator;
+
+
     if (globals.colors)
       G.colors = globals.colors;
     if (globals.skipAnimation != null)
@@ -2039,12 +2039,12 @@ function computeGoal(
     : isAnimatedString(
     value
   ) 
-    ? G.createStringInterpolator(
+    ? defaultStringInterpolation(
     {
-    range: [
-      0, 
-      1
-    ],
+
+
+
+
     output: [
       value, 
       value
@@ -2926,12 +2926,12 @@ function lerp(
     : is.string(
     from
   ) 
-    ? G.createStringInterpolator(
+    ? defaultStringInterpolation(
     {
-    range: [
-      0, 
-      1
-    ],
+
+
+
+
     output: [
       from, 
       to
-- 
2.19.2